var search_data = {"index":{"searchIndex":["dice_stats","dice","dice_set","internal_utilities","arbitrary_base_counter","filtered_distribution","math_utilities","cartesian_product()","cartesian_product_for_probabilities()","choose()","factorial()","get_clean_string()","[]()","adjusted_distribution()","calculate_probability_distribution()","clean_string()","combine_probability_distributions()","eq()","expected()","expected()","get()","gt()","gte()","increment()","length()","lt()","lte()","max()","max()","min()","min()","ne()","new()","new()","new()","new()","p()","p()","print()","print_probability()","print_stats()","roll()","roll()","standard_deviation()","standard_deviation()","too_complex?()","variance()","variance()","readme","dice_stats.gemspec","test.sh"],"longSearchIndex":["dice_stats","dice_stats::dice","dice_stats::dice_set","dice_stats::internal_utilities","dice_stats::internal_utilities::arbitrary_base_counter","dice_stats::internal_utilities::filtered_distribution","dice_stats::internal_utilities::math_utilities","dice_stats::internal_utilities::math_utilities::cartesian_product()","dice_stats::internal_utilities::math_utilities::cartesian_product_for_probabilities()","dice_stats::internal_utilities::math_utilities::choose()","dice_stats::internal_utilities::math_utilities::factorial()","dice_stats::dice_set::get_clean_string()","dice_stats::internal_utilities::arbitrary_base_counter#[]()","dice_stats::dice_set#adjusted_distribution()","dice_stats::dice#calculate_probability_distribution()","dice_stats::dice_set#clean_string()","dice_stats::dice_set#combine_probability_distributions()","dice_stats::internal_utilities::filtered_distribution#eq()","dice_stats::dice#expected()","dice_stats::dice_set#expected()","dice_stats::internal_utilities::filtered_distribution#get()","dice_stats::internal_utilities::filtered_distribution#gt()","dice_stats::internal_utilities::filtered_distribution#gte()","dice_stats::internal_utilities::arbitrary_base_counter#increment()","dice_stats::internal_utilities::arbitrary_base_counter#length()","dice_stats::internal_utilities::filtered_distribution#lt()","dice_stats::internal_utilities::filtered_distribution#lte()","dice_stats::dice#max()","dice_stats::dice_set#max()","dice_stats::dice#min()","dice_stats::dice_set#min()","dice_stats::internal_utilities::filtered_distribution#ne()","dice_stats::dice::new()","dice_stats::dice_set::new()","dice_stats::internal_utilities::arbitrary_base_counter::new()","dice_stats::internal_utilities::filtered_distribution::new()","dice_stats::dice#p()","dice_stats::dice_set#p()","dice_stats::internal_utilities::arbitrary_base_counter#print()","dice_stats::dice_set#print_probability()","dice_stats::dice#print_stats()","dice_stats::dice#roll()","dice_stats::dice_set#roll()","dice_stats::dice#standard_deviation()","dice_stats::dice_set#standard_deviation()","dice_stats::dice_set#too_complex?()","dice_stats::dice#variance()","dice_stats::dice_set#variance()","","",""],"info":[["Dice_Stats","","Dice_Stats.html","","<p>Dice_Stats is the main namespace for the gem. Dice Stats is a ruby gem for\nhandling dice related statistics. …\n"],["Dice_Stats::Dice","","Dice_Stats/Dice.html","","<p>This class repsents the roll statistics for a single type of dice. i.e. all\nd6s, or all d8s. The probability …\n"],["Dice_Stats::Dice_Set","","Dice_Stats/Dice_Set.html","","<p>This class represents the roll statistics for a combination of dice. The\nprobability distribution is …\n"],["Dice_Stats::Internal_Utilities","","Dice_Stats/Internal_Utilities.html","","<p>The Internal_Utilities module is a namespace for some basic helper\nfunctions and classes used by Dice_Stats …\n"],["Dice_Stats::Internal_Utilities::Arbitrary_base_counter","","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html","","<p>This class defines a counter where each “digit” has a different base. For\nexample, a counter …\n"],["Dice_Stats::Internal_Utilities::Filtered_distribution","","Dice_Stats/Internal_Utilities/Filtered_distribution.html","","<p>This class is used as a way to build clauses into a query of a probability\ndistribution The <code>probability_distribution</code> …\n"],["Dice_Stats::Internal_Utilities::Math_Utilities","","Dice_Stats/Internal_Utilities/Math_Utilities.html","","<p>This class simple contains some methods to aid the calculating of\nprobability distributions\n"],["Cartesian_Product","Dice_Stats::Internal_Utilities::Math_Utilities","Dice_Stats/Internal_Utilities/Math_Utilities.html#method-c-Cartesian_Product","(arrays)","<p>Note that this method is not actually used. It was a proof of concept for\ntemplating a less “clever” …\n"],["Cartesian_Product_For_Probabilities","Dice_Stats::Internal_Utilities::Math_Utilities","Dice_Stats/Internal_Utilities/Math_Utilities.html#method-c-Cartesian_Product_For_Probabilities","(hashes)","<p>This method combines an array of hashes (i.e. an array of probabilities)\ninto an aggregate probability …\n"],["Choose","Dice_Stats::Internal_Utilities::Math_Utilities","Dice_Stats/Internal_Utilities/Math_Utilities.html#method-c-Choose","(a, b)","<p>The “Choose” operator. Sometimes noted as “(5 3)” or “5 c 3”.\n"],["Factorial","Dice_Stats::Internal_Utilities::Math_Utilities","Dice_Stats/Internal_Utilities/Math_Utilities.html#method-c-Factorial","(a)","<p>The “Factorial” function\n"],["Get_Clean_String","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-c-Get_Clean_String","(dice_string, with_constant=true)","<p>Returns the “clean string” for a dice pattern without actually\ninstantiating the class, calculating …\n"],["[]","Dice_Stats::Internal_Utilities::Arbitrary_base_counter","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html#method-i-5B-5D","(i)","<p>Overloaded index operator, used to retrieve the number stored in the +i+th\ndigit place\n"],["adjusted_distribution","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-adjusted_distribution","()","<p>Add the constant the the probability distribution, useful for printing /\noutput purposes\n"],["calculate_probability_distribution","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-calculate_probability_distribution","()","<p>For internal use only. Caclulates the probability distribution on\ninitialization\n"],["clean_string","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-clean_string","(with_constant=true)","<p>Returns the dice string used to generate the pattern sorted by dice face,\ndescending. For example “2d3 …\n"],["combine_probability_distributions","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-combine_probability_distributions","()","<p>For internal use only. Takes the cartesian product of the individual dice\nand combines them.\n"],["eq","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-eq","(val)","<p>The “equal to” operator.  <strong>Note:</strong> This removes all options\nexcept the one specified. This is …\n"],["expected","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-expected","()","<p>Returns the average roll result\n"],["expected","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-expected","()","<p>Returns the average roll result\n"],["get","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-get","()","<p>Use Filtered_distribution#get to return the sum of the remaining\nprobabilities in the distribution\n"],["gt","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-gt","(val)","<p>The “greater than” operator.\n"],["gte","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-gte","(val)","<p>The “greater than or equal to” operator.\n"],["increment","Dice_Stats::Internal_Utilities::Arbitrary_base_counter","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html#method-i-increment","()","<p>Increase the “value” of the counter by one\n"],["length","Dice_Stats::Internal_Utilities::Arbitrary_base_counter","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html#method-i-length","()","<p>Return an integer representing how many digits the counter holds\n"],["lt","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-lt","(val)","<p>The “less than” operator.\n"],["lte","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-lte","(val)","<p>The “less than or equal to” operator.\n"],["max","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-max","()","<p>Returns the highest possible roll\n"],["max","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-max","()","<p>Returns the highest possible roll\n"],["min","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-min","()","<p>Returns the lowest possible roll\n"],["min","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-min","()","<p>Returns the lowest possible roll\n"],["ne","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-i-ne","(val)","<p>The “not equal to” operator. This allows for arbitrailty selecting out\noption that don&#39;t …\n"],["new","Dice_Stats::Dice","Dice_Stats/Dice.html#method-c-new","(dice_count, dice_sides, do_calculation=true)","<p>Creates a new Dice instance of a number of dice (<code>dice_count</code>)\nwith <code>dice_sides</code> faces. All dice are assumed …\n"],["new","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-c-new","(dice_string, probability_distribution=nil)","<p>Instantiates a new Dice_Set with the specified <code>dice_string</code>\npattern. Examples: “2d6 + 1d3” “2d6 …\n"],["new","Dice_Stats::Internal_Utilities::Arbitrary_base_counter","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html#method-c-new","(maximums)","<p>Define a new counter. <code>maximums</code> is an array of integers, each\nspecifying the base of its respective digit. …\n"],["new","Dice_Stats::Internal_Utilities::Filtered_distribution","Dice_Stats/Internal_Utilities/Filtered_distribution.html#method-c-new","(probability_distribution)","<p>For internal use only. The Dice_Set#p method instantiates this with a fresh\ndistribution for use in the …\n"],["p","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-p","(val)","<p>Returns the probability of a specific result (<code>val</code>).\n<strong>Not</strong> to be confused with Dice_Set#p.\n"],["p","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-p","()","<p>Instantiates and returns a Filtered_distribution. See the documentation for\nFiltered_distribution.rb …\n"],["print","Dice_Stats::Internal_Utilities::Arbitrary_base_counter","Dice_Stats/Internal_Utilities/Arbitrary_base_counter.html#method-i-print","()","<p>Puts the array of digits.\n"],["print_probability","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-print_probability","()","<p>Displays the probability distribution.  Can take up quite a lot of screen\nspace for the mroe complicated …\n"],["print_stats","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-print_stats","()","<p>Prints some basic stats about this roll\n"],["roll","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-roll","()","<p>Rolls the dice and returns the result\n"],["roll","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-roll","()","<p>Simulates a roll of the dice\n"],["standard_deviation","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-standard_deviation","()","<p>Returns the standard deviation of the roll\n"],["standard_deviation","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-standard_deviation","()","<p>Returns the standard deviation of the roll\n"],["too_complex?","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-too_complex-3F","()","<p>If the probability distribution was determined to be too complex to compute\nthis will return true.\n"],["variance","Dice_Stats::Dice","Dice_Stats/Dice.html#method-i-variance","()","<p>Returns the variance of the roll\n"],["variance","Dice_Stats::Dice_Set","Dice_Stats/Dice_Set.html#method-i-variance","()","<p>Returns the variance of the roll\n"],["README","","README_md.html","","<p>Dice_Stats\n<p>A ruby gem for handling dice related statistics.\n<p>Usage\n"],["dice_stats.gemspec","","dice_stats_gemspec.html","","<p>Gem::Specification.new { |s|\n\n<pre>s.name        = &#39;dice_stats&#39;\ns.version     = &#39;0.3.2&#39;\ns.date        = &#39;2016-11-07&#39; ...</pre>\n"],["test.sh","","test_sh.html","","<p>cd ~/www/custom_gems/dice_stats gem build dice_stats.gemspec gem uninstall\n-a dice_stats gem install …\n"]]}}